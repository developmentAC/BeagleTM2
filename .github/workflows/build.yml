# Basic workflow
name: build

# Controls when the action will run
# Workflow begins with push or PR events
# Focuses on the master branch only
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Create one single job
# This job performs all necessary checks
jobs:
  build:
    # Use the latest version of Ubuntu on Microsoft Azure
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Performs all actions on different versions of Python
        python-version: ["3.10"]
    # Define the workflow steps
    steps:
    # Checkout the code of the repository
        - name: Check out Repository Code
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        # Run the mdl linting tool
        # Refers to .mdlrc file in repository
#        - name: Run Markdown Linting
#          uses: actionshub/markdownlint@main
        # Setup Python for the current language version
        - name: Setup Python ${{ matrix.python-version }}
          if: always()
          uses: actions/setup-python@v1
          with:
            python-version: ${{ matrix.python-version }}
        # Install pip
        - name: Install Pip
          if: always()
          run: |
            pip install -U pip
        # Install pipenv
        # - name: Install Pipenv
        #   if: always()
        #   run: |
        #     pip install pipenv
        # # Install poetry
        - name: Install Poetry
          if: always()
          uses: abatilo/actions-poetry@v2.0.0
          with:
            poetry-version: 1.1.8
        # Run the Python program
        - name: Run Python Program
          if: always()
          run: |
            pwd
            ls -l
            cd beagletm2
            ls -l
            poetry install
            poetry run beagletm2 --help
        # Run the black code formatter in checking mode
   #     - name: Run Black Code Formatter
   #       run: |
   #         cd gcs
   #         poetry run task black
   #     # Run the flake8 linting tool
   #     - name: Run Flake8 Linting Tool
   #       run: |
   #         cd gcs
   #         poetry run task flake8
        # Run the pydocstyle linting tool
   #     - name: Run Pydocstyle Linting Tool
   #       run: |
   #         cd gcs
   #         poetry run task pydocstyle
        # Run the pylint linting tool
   #     - name: Run Pylint Linting Tool
   #       run: |
   #         cd gcs
   #         poetry run task pylint
        # Run the mypy type checking tool
   #     - name: Run Pylint Linting Tool
   #       run: |
   #         cd gcs
   #         poetry run task mypy
        # Run GatorGrader: see config/gatorgrade.yml
        # - name: Run GatorGrader with GatorGrade
        #   if: always()
        #   run:  |
        #     pip install gatorgrade
        #     gatorgrade --config config/gatorgrade.yml
